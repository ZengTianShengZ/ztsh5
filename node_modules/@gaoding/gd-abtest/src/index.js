import md5 from 'crypto-js/md5';
import axios from 'axios';

const ABTEST_KEY_SIGN = 'ABTEST_KEY_SIGN';

class GdABTestSdk {
  constructor() {
    this.option = null;
    this.matchedExps = null;
    this.hooks = {}
  }
  /**
   * 初始化
   * @param {Object} option
   * @example
   * gdABTestSdk.init({
   *   appKey: 'xxxxx', //应用对应的 appKey，必填
   *   appName: 'xxxxx' // 应用对应的 appName，必填
   *   userId:  'xxxxxx' // 客户端能唯一标识用户的ID，必填
   * })
   */
  init(option) {
    this.option = option;
  }
  /**
   * 根据变量名称获取所匹配的版本信息的变量值
   * @param {string} variableName 变量名
   * @param {any} defaultVaule 无匹配值时返回默认值，默认 ‘’
   */
  getValue(variableName, defaultVaule = '') {
    return this._getExps().then(matchedExps => {
      const exp = matchedExps.result.filter(item => item.variableName === variableName);
      if(exp[0] && exp[0].variableValue) {
        return exp[0].variableValue;
      }
      return defaultVaule;
    }).catch(() => {
      return defaultVaule;
    });
  }
  /**
   * 设置 userId
   * @param {string|int} userId 用户id
   */
  setUserId(userId) {
    if(!this.option) {
      console.error('Please initialize sdk first');
      return;
    }
    if(userId !== this.option.userId) {
      this.option.userId = userId;
      this.matchedExps = null;
    }
  }
  /**
   * 监听事件
   * @param {string} name 
   * @param {function} callback 
   */
  on(name, callback) {
    if(!this.hooks[name]) {
      this.hooks[name] = [];
    }
    this.hooks[name].push( callback );
  }
  /**
   * 运行 fetch事件
   * @param {object} data 
   */
  runFetchHook(data) {
    if (!this.hooks.fetch) {
      return
    }
    this.hooks.fetch.forEach(callback => {
      callback(data.result || [])
    })
  }
  /**
   * 获取所有匹配的版本信息
   * @param {function} callback 回调函数
   */
  _getExps() {
    return new Promise((resolve) => {
      resolve(this.matchedExps);
    }).then(matchedExps => {
      if(matchedExps) {
        return matchedExps;
      }
      else {
        return this._requestExps();
      }
    }).then(res => {
      this.matchedExps = res;
      return res;
    });
  }
  /**
   * 私有方法，请求版本信息
   * @return Promise|null
   */
  _requestExps() {
    if(!this.option) {
      console.error('Please initialize sdk first');
      return;
    }
    const {appKey, appName, userId} = this.option;
    const sign = md5(appKey + userId + ABTEST_KEY_SIGN).toString().toUpperCase();
    return axios.get(`https://abtest-proxy.hlgdata.com/strategy/${appName}?userId=${userId}`, {
      headers: {'ABTEST-SIGN': sign}
    }).then(res => {
      this.runFetchHook(res.data)
      return res.data;
    });
  }
}

export default new GdABTestSdk();
