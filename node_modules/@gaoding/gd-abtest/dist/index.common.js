'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var md5 = _interopDefault(require('crypto-js/md5'));
var axios = _interopDefault(require('axios'));

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

var ABTEST_KEY_SIGN = 'ABTEST_KEY_SIGN';

var GdABTestSdk =
/*#__PURE__*/
function () {
  function GdABTestSdk() {
    _classCallCheck(this, GdABTestSdk);

    this.option = null;
    this.matchedExps = null;
    this.hooks = {};
  }
  /**
   * 初始化
   * @param {Object} option
   * @example
   * gdABTestSdk.init({
   *   appKey: 'xxxxx', //应用对应的 appKey，必填
   *   appName: 'xxxxx' // 应用对应的 appName，必填
   *   userId:  'xxxxxx' // 客户端能唯一标识用户的ID，必填
   * })
   */


  _createClass(GdABTestSdk, [{
    key: "init",
    value: function init(option) {
      this.option = option;
    }
    /**
     * 根据变量名称获取所匹配的版本信息的变量值
     * @param {string} variableName 变量名
     * @param {any} defaultVaule 无匹配值时返回默认值，默认 ‘’
     */

  }, {
    key: "getValue",
    value: function getValue(variableName) {
      var defaultVaule = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
      return this._getExps().then(function (matchedExps) {
        var exp = matchedExps.result.filter(function (item) {
          return item.variableName === variableName;
        });

        if (exp[0] && exp[0].variableValue) {
          return exp[0].variableValue;
        }

        return defaultVaule;
      }).catch(function () {
        return defaultVaule;
      });
    }
    /**
     * 设置 userId
     * @param {string|int} userId 用户id
     */

  }, {
    key: "setUserId",
    value: function setUserId(userId) {
      if (!this.option) {
        console.error('Please initialize sdk first');
        return;
      }

      if (userId !== this.option.userId) {
        this.option.userId = userId;
        this.matchedExps = null;
      }
    }
    /**
     * 监听事件
     * @param {string} name 
     * @param {function} callback 
     */

  }, {
    key: "on",
    value: function on(name, callback) {
      if (!this.hooks[name]) {
        this.hooks[name] = [];
      }

      this.hooks[name].push(callback);
    }
    /**
     * 运行 fetch事件
     * @param {object} data 
     */

  }, {
    key: "runFetchHook",
    value: function runFetchHook(data) {
      if (!this.hooks.fetch) {
        return;
      }

      this.hooks.fetch.forEach(function (callback) {
        callback(data.result || []);
      });
    }
    /**
     * 获取所有匹配的版本信息
     * @param {function} callback 回调函数
     */

  }, {
    key: "_getExps",
    value: function _getExps() {
      var _this = this;

      return new Promise(function (resolve) {
        resolve(_this.matchedExps);
      }).then(function (matchedExps) {
        if (matchedExps) {
          return matchedExps;
        } else {
          return _this._requestExps();
        }
      }).then(function (res) {
        _this.matchedExps = res;
        return res;
      });
    }
    /**
     * 私有方法，请求版本信息
     * @return Promise|null
     */

  }, {
    key: "_requestExps",
    value: function _requestExps() {
      var _this2 = this;

      if (!this.option) {
        console.error('Please initialize sdk first');
        return;
      }

      var _this$option = this.option,
          appKey = _this$option.appKey,
          appName = _this$option.appName,
          userId = _this$option.userId;
      var sign = md5(appKey + userId + ABTEST_KEY_SIGN).toString().toUpperCase();
      return axios.get("https://abtest-proxy.hlgdata.com/strategy/".concat(appName, "?userId=").concat(userId), {
        headers: {
          'ABTEST-SIGN': sign
        }
      }).then(function (res) {
        _this2.runFetchHook(res.data);

        return res.data;
      });
    }
  }]);

  return GdABTestSdk;
}();

var index = new GdABTestSdk();

module.exports = index;
